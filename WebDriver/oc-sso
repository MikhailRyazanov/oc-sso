#!/usr/bin/env python3
# pylint: disable=C0103,C0114,C0115,C0116,E1121,R0902,R0903
import argparse
import json
import logging as log
import os
import shutil
import socket
from subprocess import CalledProcessError, DEVNULL, Popen, run
import sys
from time import sleep
from urllib.request import Request, urlopen
from urllib.error import HTTPError, URLError
from xml.etree import ElementTree as ET


def main():
    parser = argparse.ArgumentParser(
        prog=os.path.basename(__file__),
        description='Wrapper script for OpenConnect implementing SAML 2.0 '
                    'web-browser authentication to Cisco SSL VPNs',
        epilog='All additional options are passed to OpenConnect',
        allow_abbrev=False)
    parser.add_argument(
        '-V', '--version', action='version', version='%(prog)s v0.2-wd')
    parser.add_argument(
        '-L', '--log-level', metavar='LEVEL',
        choices=['ERROR', 'WARNING', 'INFO', 'DEBUG'], default='INFO',
        help='verbosity level for logging messages '
             '(%(choices)s; default: %(default)s)')
    parser.add_argument(
        '--version-string', dest='version', default='5.1.4.74',
        help='AnyConnect version for authentication and OpenConnect '
             '(default:  %(default)s)')
    parser.add_argument(
        '--webdriver', choices=['chromedriver', 'geckodriver'], default='',
        help='WebDriver implementation to use: '
             'chromedriver for Chrome/Chromium or geckodriver for Firefox '
             '(default is to try both)')
    parser.add_argument(
        '--sso-timeout', type=int, default='120',
        help='timeout in seconds for web-browser SSO authentication '
             '(default: %(default)s)')
    parser.add_argument(
        '--attempts', type=int, default='5',
        help='number of attempts to communicate with the server at the stages '
             'that can fail randomly (default: %(default)s)')
    parser.add_argument(
        'server',
        help='VPN server hostname')
    args, oc_args = parser.parse_known_args()

    log.basicConfig(format='%(levelname)s: %(message)s', level=args.log_level)

    try:
        vpn_url = 'https://' + args.server
        log.info('Authenticating to VPN endpoint %r', vpn_url)
        vpn_url, auth_info = authenticate(vpn_url, args)
    except KeyboardInterrupt:
        log.warning('Exiting on SIGINT')
        return os.EX_TEMPFAIL
    except HTTPError as e:
        log.error('Request error: %r', e)
        return os.EX_PROTOCOL
    except AuthResponseError as e:
        log.error('Required attributes not found in response (%r), '
                  'does this endpoint do SSO?), exiting', e)
        return os.EX_DATAERR
    except BrowserException as e:
        log.error('Error in web-browser session: %r', e)
        return os.EX_UNAVAILABLE
    except Exception as e:
        log.error(e)
        return os.EX_SOFTWARE

    try:
        command = [
            'sudo', 'openconnect',
            '--useragent', f'AnyConnect Linux_64 {args.version}',
            '--version-string', args.version,
            '--cookie-on-stdin',
            # '--servercert', auth_info.server_cert_hash,
            *oc_args,
            vpn_url
        ]
        session_token = auth_info.session_token.encode('UTF-8')
        log.debug('Starting OpenConnect: %r', command)
        for attempt in range(args.attempts):
            try:
                run(command, input=session_token, check=True)
                break
            except CalledProcessError as e:
                log.warning('OpenConnect exited with code %r', e.returncode)
                log.info('Attempt %d in 5 seconds...', attempt + 2)
                sleep(5)

    except KeyboardInterrupt:
        log.warning('Exiting on SIGINT')

    return os.EX_OK


def authenticate(vpn_url, args):
    # Resolve possible redirect
    vpn_url = urlopen(vpn_url).url
    log.debug('Auth target URL %r', vpn_url)

    # as sent by Secure Client
    headers = {
        'User-Agent': f'AnyConnect Linux_64 {args.version}',
        'Accept': '*/*',
        'Accept-Encoding': 'identity',
        'X-Transcend-Version': '1',
        'X-Aggregate-Auth': '1',
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    # Start authentication
    def auth_init():
        request = AuthInitRequest(args.version, vpn_url).str()
        log.debug('Sending auth init request: %r', request)
        response = urlopen(Request(vpn_url, request, headers)).read()
        log.debug('Auth init response received: %r', response)
        auth_info = parse_response(response)
        if not isinstance(auth_info, AuthRequestResponse):
            log.error('Could not start authentication. '
                      'Invalid response type in current state: %r', auth_info)
            raise AuthenticationError(auth_info)
        if auth_info.error:
            log.error('Could not start authentication. '
                      'Error %r in response: %r', auth_info.error, auth_info)
            raise AuthenticationError(auth_info)
        return auth_info

    auth_info = auth_init()

    # SSO authentication in web browser
    try:
        log.debug('Launching web browser at %r', auth_info.login)
        with WebDriver(args.webdriver) as browser:
            for attempt in range(1, args.attempts):
                browser.NavigateTo(auth_info.login)
                sleep(1)
                url = browser.GetCurrentURL()
                log.debug('Current URL: %r', url)
                if url != auth_info.login:
                    break
                log.warning('Not redirected to login page')
                if attempt < args.attempts - 1:
                    log.info('Attempt %d...', attempt + 1)
                    auth_info = auth_init()
                    log.debug('Trying %r', auth_info.login)
                    sleep(1)
            else:
                raise AuthenticationError(
                    'Browser was not redirected to login page')
            browser.ExecuteScript('document.title="OpenConnect authentication '
                                  f'to {args.server}"')
            log.debug('Waiting for cookie %r', auth_info.cookie)
            sso_token = browser.GetNamedCookie(auth_info.cookie,
                                               args.sso_timeout)
            log.debug('SSO token: %r', sso_token)
    except ConnectionError:
        raise BrowserException('Browser was closed')
    except Exception as e:
        raise BrowserException(e) from e
    if not sso_token:
        raise AuthResponseError('Did not receive SSO token in '
                                f'{args.sso_timeout} seconds')

    # Complete authentication
    request = AuthFinishRequest(args.version, auth_info, sso_token).str()
    for attempt in range(args.attempts):
        log.debug('Sending auth finish request: %r', request)
        response = urlopen(Request(vpn_url, request, headers)).read()
        log.debug('Auth finish response received: %r', response)
        try:
            auth_info = parse_response(response)
        except AuthResponseError:
            auth_info = None
        if not isinstance(auth_info, AuthCompleteResponse):
            log.warning('Invalid response type in current state: %r',
                        auth_info)
            sleep(1)
        else:
            break
    else:
        log.error('Could not finish authentication.')
        raise AuthenticationError(auth_info)
    log.debug('Session token: %r', auth_info.session_token)

    return vpn_url, auth_info


class AuthRequest:
    SE = ET.SubElement

    def __init__(self, t, version):
        self.xml = ET.Element('config-auth',
                              {'client': 'vpn',
                               'type': t,
                               'aggregate-auth-version': '2'})
        self.SE(self.xml, 'version', {'who': 'vpn'}).text = version
        self.SE(self.xml, 'device-id').text = 'linux-64'

    def str(self):
        ET.indent(self.xml)
        return ET.tostring(self.xml, xml_declaration=True,
                           encoding='UTF-8') + b'\n'


class AuthInitRequest(AuthRequest):
    def __init__(self, version, vpn_url):
        super().__init__('init', version)
        self.SE(self.xml, 'group-select').text = ''
        self.SE(self.xml, 'group-access').text = vpn_url
        self.SE(self.SE(self.xml, 'capabilities'),
                'auth-method').text = 'single-sign-on-v2'


class AuthFinishRequest(AuthRequest):
    def __init__(self, version, auth_info, sso_token):
        super().__init__('auth-reply', version)
        self.SE(self.xml, 'session-token')
        self.SE(self.xml, 'session-id')
        self.xml.append(auth_info.opaque)
        self.SE(self.SE(self.xml, 'auth'), 'sso-token').text = sso_token


def parse_response(response):
    xml = ET.fromstring(response)
    t = xml.get('type')
    if t == 'auth-request':
        resp = AuthRequestResponse(xml)
        exp_id = 'main'
    elif t == 'complete':
        resp = AuthCompleteResponse(xml)
        exp_id = 'success'
    log.info('Response received: id=%r, message=%r%s', resp.id, resp.message,
             f', title={resp.title!r}' if hasattr(resp, 'title') else '')
    assert resp.id == exp_id
    return resp


class AuthResponse:
    def val(self, path):
        return self.xml.find(path).text

    def opt(self, path):
        return getattr(self.xml.find(path), 'text', None)

    def __repr__(self):
        return type(self).__name__ + str(vars(self))


class AuthRequestResponse(AuthResponse):
    def __init__(self, xml):
        self.xml = xml
        try:
            self.id = xml.find('auth').get('id')
            self.title = self.opt('auth/title')
            self.message = self.val('auth/message')
            self.error = self.opt('auth/error')
            self.opaque = xml.find('opaque')
            self.login = self.val('auth/sso-v2-login')
            # self.final = self.val('auth/sso-v2-login-final')
            self.cookie = self.val('auth/sso-v2-token-cookie-name')
        except AttributeError as e:
            raise AuthResponseError(self.opt('error') or e)
        del self.xml


class AuthCompleteResponse(AuthResponse):
    def __init__(self, xml):
        self.xml = xml
        try:
            self.id = xml.find('auth').get('id')
            self.message = self.val('auth/message')
            self.session_token = self.val('session-token')
            # self.server_cert_hash = \
            #     self.val('config/vpn-base-config/server-cert-hash')
        except AttributeError as e:
            raise AuthResponseError(self.opt('error') or e)
        del self.xml


class AuthenticationError(Exception):
    pass


class AuthResponseError(AuthenticationError):
    pass


class WebDriver:
    def __init__(self, driver=''):
        if driver:
            self.driver = driver
            return
        for d in ['chromedriver', 'geckodriver']:
            if shutil.which(d):
                log.debug('Using %r', d)
                self.driver = d
                break
        else:
            raise FileNotFoundError('No WebDriver implementation found!')

    def __enter__(self):
        # get random available port
        with socket.create_server(('127.0.0.1', 0)) as s:
            addr, port = s.getsockname()
        self.url = f'http://{addr}:{port}'
        # start driver (on hopefully still available port), discarding logging
        log.debug('Starting %s on port %d', self.driver, port)
        if log.getLogger(__name__).isEnabledFor(log.DEBUG):
            stderr = None
        else:
            stderr = DEVNULL
        self.process = Popen([self.driver, f'--port={port}'],
                             stdout=DEVNULL, stderr=stderr)
        # start browser session
        self.NewSession()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        try:
            # stop browser session
            self.DeleteSession()
        finally:
            # stop driver
            if self.driver == 'chromedriver':
                self.command('GET', '/shutdown')
            else:  # geckodriver
                # (see https://github.com/mozilla/geckodriver/issues/771)
                log.debug('Terminating %s', self.driver)
                self.process.terminate()
            while os.path.exists(self.profile):
                log.warning('Deleting abandoned %s', self.profile)
                sleep(1)
                shutil.rmtree(self.profile, ignore_errors=True)

    def command(self, method, endpoint, data=None, quiet=(False, False)):
        endpoint = self.url + endpoint
        if not quiet[0]:
            log.debug('WebDriver command: %s %s %r',
                      method, endpoint, data or '')
        if method == 'POST':
            req = Request(endpoint, json.dumps(data).encode(),
                          {'Content-Type': 'application/json'})
        else:
            req = Request(endpoint, method=method)
        try:
            with urlopen(req) as resp:
                reason = resp.reason
                value = json.load(resp)
        except HTTPError as e:
            reason = e.reason
            value = json.load(e.fp)
        if value:
            value = value['value']
        if not quiet[1]:
            log.debug('Response: %r %r', reason, value)
        return reason, value

    def DeleteSession(self):
        self.command('DELETE', self.id)

    def ExecuteScript(self, script, args=()):
        self.command('POST', self.id + '/execute/sync',
                     {'script': script, 'args': args})

    def GetCurrentURL(self):
        _, value = self.command('GET', self.id + '/url')
        return value

    def GetNamedCookie(self, name, timeout=1):
        endpoint = self.id + '/cookie/' + name
        for t in range(timeout):
            reason, value = self.command('GET', endpoint, quiet=(t, True))
            if reason == 'OK':
                break
            if value['error'] == 'no such cookie':
                sleep(1)  # (ignoring small time spent in command())
            else:
                raise ConnectionError(value)
        log.debug('Response: %r %r', reason, value)
        return value.get('value')

    def NavigateTo(self, url):
        self.command('POST', self.id + '/url', {'url': url})

    def NewSession(self, capabilities=None):
        for _ in range(5):
            try:
                _, value = self.command('POST', '/session',
                                        {'capabilities': capabilities or {}})
                break
            except URLError:
                log.debug('Waiting for %s...', self.driver)
                sleep(1)
        else:
            raise ConnectionError('Could not connect to WebDriver')
        self.id = '/session/' + value['sessionId']
        cap = value['capabilities']
        if self.driver == 'chromedriver':
            self.profile = cap['chrome']['userDataDir']
        else:  # geckodriver
            self.profile = cap['moz:profile']
        log.debug('Browser profile: %s', self.profile)


class BrowserException(Exception):
    pass


if __name__ == '__main__':
    sys.exit(main())
